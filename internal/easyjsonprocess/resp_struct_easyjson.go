// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package easyjsonprocess

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonAc765e9cDecodeGoRedisEasyjsonprocess(in *jlexer.Lexer, out *OrderResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userId":
			out.UserId = string(in.String())
		case "purchaseNum":
			out.PurchaseNum = int(in.Int())
		case "productId":
			out.ProductId = string(in.String())
		case "orderNum":
			out.OrderNum = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAc765e9cEncodeGoRedisEasyjsonprocess(out *jwriter.Writer, in OrderResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserId))
	}
	{
		const prefix string = ",\"purchaseNum\":"
		out.RawString(prefix)
		out.Int(int(in.PurchaseNum))
	}
	{
		const prefix string = ",\"productId\":"
		out.RawString(prefix)
		out.String(string(in.ProductId))
	}
	{
		const prefix string = ",\"orderNum\":"
		out.RawString(prefix)
		out.String(string(in.OrderNum))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAc765e9cEncodeGoRedisEasyjsonprocess(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAc765e9cEncodeGoRedisEasyjsonprocess(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAc765e9cDecodeGoRedisEasyjsonprocess(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAc765e9cDecodeGoRedisEasyjsonprocess(l, v)
}
func easyjsonAc765e9cDecodeGoRedisEasyjsonprocess1(in *jlexer.Lexer, out *CommonResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "msg":
			out.Msg = string(in.String())
		case "data":
			if m, ok := out.Data.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Data.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Data = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAc765e9cEncodeGoRedisEasyjsonprocess1(out *jwriter.Writer, in CommonResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"msg\":"
		out.RawString(prefix)
		out.String(string(in.Msg))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if m, ok := in.Data.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Data.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Data))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommonResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAc765e9cEncodeGoRedisEasyjsonprocess1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommonResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAc765e9cEncodeGoRedisEasyjsonprocess1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommonResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAc765e9cDecodeGoRedisEasyjsonprocess1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommonResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAc765e9cDecodeGoRedisEasyjsonprocess1(l, v)
}
